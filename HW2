
# #Task 1
# #  def total_salary(path):
# #
# #   try:
#  #     with open(path, encoding='utf-8') as file:
# #       total_salary = 0
# #       developers_count = 0
# #       for line in file:
# #         developer_data = line.split(',')
# #         name, salary = developer_data[0], int(developer_data[1])
# #         total_salary += salary
# #         developers_count += 1
# #       average_salary = total_salary / developers_count
# #       return total_salary, average_salary
 # #   except FileNotFoundError:
# # #     print(f"Файл '{path}' не знайдено!")
# # #     return 0, 0
# # #   except Exception as e:
# # #     print(f"Помилка при роботі з файлом '{path}': {e}")
# # #     return 0, 0
# # #
# # # # Приклад використання
# # # path = 'salaries.txt'
# # # total_salary, average_salary = total_salary(path)
# # #
# # # if total_salary and average_salary:
# # #   print(f"Загальна сума заробітних плат: {total_salary}")
# # #   print(f"Середня заробітна плата: {average_salary}")
# #
# #  #task 2
# # def get_cats_info(path):
# #   try:
# #     with open(path, encoding='utf-8') as file:
# #       cats_info = []
# #       for line in file:
# #         cat_data = line.split(',')
# #         cat_id, name, age = cat_data[0], cat_data[1], int(cat_data[2])
# #         cat_info = {"id": cat_id, "name": name, "age": age}
# #         cats_info.append(cat_info)
# #       return cats_info
# #   except FileNotFoundError:
# #     print(f"Файл '{path}' не знайдено!")
# #     return []
# #   except Exception as e:
# #     print(f"Помилка при роботі з файлом '{path}': {e}")
# #     return []
# #
# # # Приклад використання
# # path = 'cats_info.txt'
# cats_info = get_cats_info(path)
#
# if cats_info:
#    print(cats_info)
#
# #Task4
# from typing import Dict, List
#
# def parse_input(user_input: str) -> tuple:
#
#     cmd, *args = user_input.split()
#     cmd = cmd.strip().lower()
#     return cmd, args
#
# def add_contact(args: List[str], contacts: Dict[str, str]) -> str:
#
#     name, phone = args
#     contacts[name] = phone
#     return "Contact added."
#
# def change_contact(args: List[str], contacts: Dict[str, str]) -> str:
#
#     name, phone = args
#     if name in contacts:
#         contacts[name] = phone
#         return "Contact updated."
#     else:
#         return f"Contact '{name}' not found."
#
# def show_phone(name: str, contacts: Dict[str, str]) -> str:
#
#     if name in contacts:
#         return contacts[name]
#     else:
#         return f"Contact '{name}' not found."
#
# def show_all(contacts: Dict[str, str]) -> str:
#
#     all_contacts = "\n".join(f"{name}: {phone}" for name, phone in contacts.items())
#     return f"All contacts:\n{all_contacts}"
#
# def main():
#     contacts: Dict[str, str] = {}
#
#     print("Welcome to the assistant bot!")
#     while True:
#         user_input = input("Enter a command: ")
#         command, args = parse_input(user_input)
#
#         if command in ("close", "exit"):
#             print("Good bye!")
#             break
#
#         elif command == "hello":
#             print("How can I help you?")
#
#         elif command == "add":
#             print(add_contact(args, contacts))
#
#         elif command == "change":
#             print(change_contact(args, contacts))
#
#         elif command == "phone":
#             if len(args) != 1:
#                 print("Invalid number of arguments.")
#             else:
#                 print(show_phone(args[0], contacts))
#
#         elif command == "all":
#             print(show_all(contacts))
#
#         else:
#             print("Invalid command.")
#
# if __name__ == "__main__":
#     main()
